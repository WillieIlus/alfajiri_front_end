<template>
  <div>
    <UButton class="mb-4 mr-4" icon="i-heroicons-plus" color="primary"
      :ui="{ rounded: 'rounded-full' }" size="xl" @click="toggleForm" label="Add a new job" />

    <UCard v-if="showForm" class="mb-6">
      <h2 class="mb-4 font-bold text-2xl">{{ jobSlug ? 'Update Job Vacancy' : 'Add a new Job Vacancy' }}</h2>

      <form class="space-y-6" @submit.prevent="onSubmit">
        <!-- Basic Information Section -->
        <fieldset class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Basic Information</legend>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <UFormGroup name="title" label="Job Title">
              <UInput v-model="form.title" placeholder="Enter job title" @focus="checkAuth" />
            </UFormGroup>
            <UFormGroup class="flex-grow w-full" name="company" label="Company">
              <div class="flex items-center">
                <UInputMenu :ui="{ rounded: 'rounded-r-none' }" class="flex-grow" v-model="form.company"
                  :options="companyOptions" />
                <UButton class="-ml-px" icon="i-heroicons-plus" size="sm" color="primary"
                  :ui="{ rounded: 'rounded-l-none' }" variant="solid" @click="openModal('company')" />
              </div>
            </UFormGroup>

            <UFormGroup name="category" label="Category">
              <div class="flex items-center">
                <UInputMenu :ui="{ rounded: 'rounded-r-none' }" class="flex-grow" v-model="form.category"
                  :options="categoryOptions" />
                <UButton class="-ml-px" icon="i-heroicons-plus" size="sm" color="primary"
                  :ui="{ rounded: 'rounded-l-none' }" variant="solid" @click="openModal('category')" />
              </div>
            </UFormGroup>

            <UFormGroup name="location" label="Location">
              <div class="flex items-center">
                <UInputMenu :ui="{ rounded: 'rounded-r-none' }" class="flex-grow" v-model="form.location"
                  :options="locationOptions" />
                <UButton class="-ml-px" icon="i-heroicons-plus" size="sm" color="primary"
                  :ui="{ rounded: 'rounded-l-none' }" variant="solid" @click="openModal('location')" />
              </div>
            </UFormGroup>
          </div>
        </fieldset>

        <!-- Job Details Section -->
        <fieldset class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Job Details</legend>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <UFormGroup name="job_type" label="Job Type">
              <USelect v-model="form.job_type" :options="JOB_TYPE_CHOICES" />
            </UFormGroup>
            <UFormGroup name="vacancies" label="Vacancies">
              <UInput v-model="form.vacancies" type="number" placeholder="Available positions" />
            </UFormGroup>
            <UFormGroup name="deadline" label="Application Deadline">
              <UPopover mode="click" :popper="{ placement: 'bottom-start' }">
                <UInput :value="form.deadline ? formatDate(form.deadline) : ''" placeholder="Select Deadline" readonly class="cursor-pointer">
                  <template #trailing>
                    <UIcon name="i-heroicons-calendar" class="cursor-pointer"/>
                  </template>
                </UInput>
                <template #panel="{ close }">
                  <DatePicker v-model="form.deadline" @update:model-value="close" />
                </template>
              </UPopover>
            </UFormGroup>
          </div>
        </fieldset>

        <!-- Contact Information Section -->
        <fieldset class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Contact Information</legend>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <UFormGroup name="application_contact" label="Application Contact">
              <UInput v-model="form.application_contact" placeholder="Email or website" />
            </UFormGroup>
            <UFormGroup name="address" label="Address">
              <UInput v-model="form.address" placeholder="Enter specific location" />
            </UFormGroup>
          </div>
        </fieldset>

        <!-- Job Poster Section -->
        <fieldset class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Job Poster</legend>
          <UFormGroup name="image" label="Poster Image">
            <input type="file" @change="onImageChange" accept="image/*" ref="fileInput" />
          </UFormGroup>
          <ImagePreview :imageUrl="imagePreview" />
        </fieldset>

        <!-- Description Section -->
        <fieldset class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Job Description</legend>
          <UFormGroup name="description" label="Description">
            <TiptapEditor ref="tiptapEditor" :modelValue="form.description"
              @update:modelValue="form.description = $event" />
          </UFormGroup>
        </fieldset>

        <!-- Additional Fields Section -->
        <UButton v-if="!showMoreFields" @click="showMoreFields = true" class="w-full" color="gray" variant="soft">
          Load More Fields
        </UButton>

        <fieldset v-if="showMoreFields" class="border p-4 rounded-lg">
          <legend class="text-lg font-semibold px-2">Additional Details</legend>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <UFormGroup name="work_experience" label="Work Experience">
              <UInput v-model="form.work_experience" placeholder="Required work experience" />
            </UFormGroup>
            <UFormGroup name="work_hours" label="Work Hours">
              <UInput v-model="form.work_hours" placeholder="Duration of work" />
            </UFormGroup>
            <UFormGroup name="work_hour_type" label="Work Hour Type">
              <USelect v-model="form.work_hour_type" :options="WORK_HOUR_CHOICES" />
            </UFormGroup>
            <UFormGroup name="min_salary" label="Min Salary">
              <UInput v-model="form.min_salary" type="number" placeholder="Minimum salary" />
            </UFormGroup>
            <UFormGroup name="max_salary" label="Max Salary">
              <UInput v-model="form.max_salary" type="number" placeholder="Maximum salary" />
            </UFormGroup>
            <UFormGroup name="salary_type" label="Salary Type">
              <USelect v-model="form.salary_type" :options="SALARY_TYPE_CHOICES" />
            </UFormGroup>
            <UFormGroup name="currency" label="Currency">
              <USelect v-model="form.currency" :options="CURRENCY_CHOICES" />
            </UFormGroup>
          </div>
        </fieldset>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-2">
          <UButton variant="outline" @click="clearForm">
            Clear
          </UButton>
          <UButton type="submit" color="primary" :loading="submitting">
            {{ jobSlug ? 'Update' : 'Submit' }}
          </UButton>
        </div>
      </form>

      <UAlert v-if="errorMessage" color="red" variant="soft" icon="i-heroicons-exclamation-circle" class="mb-4"
        title="Error!" :description="errorMessage" />
      <UAlert v-if="successMessage" color="green" variant="soft" icon="i-heroicons-check-circle" class="mb-4"
        title="Success!" :description="successMessage" />

    </UCard>
  </div>


  <UModal v-model="isModalOpen">
    <UCard>
      <template #header>
        <h3 class="text-xl font-semibold">{{ modalTitle }}</h3>
      </template>
      <CompanyForm v-if="activeModal === 'company'" @company-added="handleCompanyAdded" />
      <CategoryForm v-if="activeModal === 'category'" @category-added="handleCategoryAdded" />
      <LocationForm v-if="activeModal === 'location'" @location-added="handleLocationAdded" />
    </UCard>
  </UModal>

</template>

<script setup lang="ts">
import { ref, reactive, computed, onMounted, watch } from 'vue'
import { storeToRefs } from 'pinia'
import { z } from 'zod'
import { useJobStore } from '~/store/jobs'
import { useCompanyStore } from '~/store/companies'
import { useCategoryStore } from '~/store/categories'
import { useLocationStore } from '~/store/locations'
import { useAccountStore } from '~/store/accounts'
import { useRouter, useRoute } from 'vue-router'
import DatePicker from '~/components/date-picker.vue'

const router = useRouter()
const route = useRoute()
const jobStore = useJobStore()
const companyStore = useCompanyStore()
const categoryStore = useCategoryStore()
const locationStore = useLocationStore()
const accountStore = useAccountStore()

const { companies } = storeToRefs(companyStore)
const { categories } = storeToRefs(categoryStore)
const { locations } = storeToRefs(locationStore)

const props = defineProps<{
  jobSlug?: string
}>()

const emit = defineEmits(['jobCreated', 'jobUpdated'])

const isModalOpen = ref(false)
const activeModal = ref('')
const tiptapEditor = ref(null)
const submitting = ref(false)
const successMessage = ref('')
const errorMessage = ref('')
const showDetails = ref(false)
const showMoreDetails = ref(false)
const imagePreview = ref<string | null>(null)
const fileInput = ref<HTMLInputElement | null>(null)

const JOB_TYPE_CHOICES = [
  { label: 'Full Time', value: 'Full Time' },
  { label: 'Part Time', value: 'Part Time' },
  { label: 'Contract', value: 'Contract' },
  { label: 'Internship', value: 'Internship' },
  { label: 'Temporary', value: 'Temporary' },
  { label: 'Freelance', value: 'Freelance' },
]

const CURRENCY_CHOICES = [
  { label: 'Kenya Shilling', value: 'KSH' },
  { label: 'US Dollar', value: 'USD' },
  { label: 'Uganda Shilling', value: 'UGH' },
  { label: 'Tanzania Shilling', value: 'TSH' },
  { label: 'Euro', value: 'EUR' },
  { label: 'British Pound', value: 'GBP' },
]

const SALARY_TYPE_CHOICES = [
  { label: 'Per Hour', value: 'PH' },
  { label: 'Per Day', value: 'PD' },
  { label: 'Per Week', value: 'PW' },
  { label: 'Per Month', value: 'PM' },
  { label: 'Per Year', value: 'PY' },
]

const WORK_HOUR_CHOICES = [
  { label: 'Per Day', value: 'PD' },
  { label: 'Per Week', value: 'PW' },
  { label: 'Per Month', value: 'PM' },
  { label: 'Per Year', value: 'PY' },
]

const schema = z.object({
  title: z.string().min(4, 'Must be at least 4 characters'),
  company: z.object({ label: z.string(), value: z.number() }).nullable(),
  description: z.string().min(26, 'Must be at least 26 characters'),
  category: z.object({ label: z.string(), value: z.number() }).nullable(),
  location: z.object({ label: z.string(), value: z.number() }).nullable(),
  job_type: z.enum(JOB_TYPE_CHOICES.map(choice => choice.value)).optional().nullish().or(z.literal('')),
  image: z.any().optional().refine(
    (val) => !val || (typeof File !== 'undefined' && val instanceof File),
    'Must be a File object'
  ),
  address: z.string().optional().nullish().or(z.literal('')),
  application_contact: z.string().refine(
    (value) => {
      if (!value) return true; // Allow empty value if the field is optional
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      const urlRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
      return emailRegex.test(value) || urlRegex.test(value);
    },
    { message: "Must be a valid email address or URL" }
  ),
  website: z.string().url('Invalid URL').optional().nullish().or(z.literal('')),
  phone: z.string().optional().nullish().or(z.literal('')),
  vacancies: z.number().int('Must be an integer').positive('Must be positive').optional().nullish().or(z.literal('')),
  work_experience: z.number().int('Must be an integer').nonnegative('Must be non-negative').optional().nullish().or(z.literal('')),
  work_hours: z.number().int('Must be an integer').positive('Must be positive').optional().nullish().or(z.literal('')),
  work_hour_type: z.enum(WORK_HOUR_CHOICES.map(choice => choice.value)).optional().nullish().or(z.literal('')),
  min_salary: z.number().positive('Must be positive').optional().nullish().or(z.literal('')),
  max_salary: z.number().positive('Must be positive').optional().nullish().or(z.literal('')),
  salary_type: z.enum(SALARY_TYPE_CHOICES.map(choice => choice.value)).optional().nullish().or(z.literal('')),
  currency: z.enum(CURRENCY_CHOICES.map(choice => choice.value)).optional().nullish().or(z.literal('')),
  deadline: z.date().optional().nullish(),
})

type FormData = z.infer<typeof schema>

const form = reactive<FormData>({
  title: '',
  company: null,
  category: null,
  location: null,
  description: '',
  job_type: '',
  image: undefined,
  address: '',
  application_contact: '',
  website: '',
  phone: '',
  vacancies: '',
  work_experience: '',
  work_hours: '',
  work_hour_type: '',
  min_salary: '',
  max_salary: '',
  salary_type: '',
  currency: '',
  deadline: null,
})

const onImageChange = (e: Event) => {
  if (typeof window !== 'undefined') {
    const target = e.target as HTMLInputElement
    if (target && target.files && target.files.length > 0) {
      form.image = target.files[0]
      imagePreview.value = URL.createObjectURL(target.files[0])
    }
  }
}

const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

const modalTitle = computed(() => {
  switch (activeModal.value) {
    case 'company': return 'Add New Company'
    case 'category': return 'Add New Category'
    case 'location': return 'Add New Location'
    default: return ''
  }
})

const companyOptions = computed(() => {
  const currentUserEmail = accountStore.user?.email
  return (companies.value || [])
    .filter(company => company.user?.email === currentUserEmail)
    .map(company => ({
      label: company.name,
      value: company.id
    }))
})

const categoryOptions = computed(() => {
  return (categories.value || []).map(category => ({
    label: category.name,
    value: category.id
  }))
})

const locationOptions = computed(() => {
  return (locations.value || []).map(location => ({
    label: location.name,
    value: location.id
  }))
})

const showForm = ref(false)
const showMoreFields = ref(false)

const toggleForm = () => {
  showForm.value = !showForm.value
  if (!showForm.value) {
    clearForm()
  }
}

const openModal = (type: 'company' | 'category' | 'location') => {
  activeModal.value = type
  isModalOpen.value = true
}

const checkAuth = () => {
  if (!accountStore.isLoggedIn) {
    router.push('/login')
  } else {
    // showDetails.value = true
    showForm.value = true
  }
}


const formatDateForServer = (date: Date | null): string | null => {
  if (!date) return null;
  return date.toISOString().split('T')[0]; // This will return the date in YYYY-MM-DD format
}

const onSubmit = async () => {
  submitting.value = true;
  errorMessage.value = '';
  successMessage.value = '';

  try {
    const validatedData = await schema.parseAsync(form);

    const apiData = {
      ...validatedData,
      company: validatedData.company?.value,
      category: validatedData.category?.value,
      location: validatedData.location?.value,
      deadline: formatDateForServer(validatedData.deadline),
    };

    console.log('Data to be sent to API:', apiData);

    const formData = new FormData();

    Object.entries(apiData).forEach(([key, value]) => {
      if (value !== null && value !== undefined) {
        formData.append(key, value);
      }
    });

    const newJob = await jobStore.createJob(formData);

    successMessage.value = 'Job created successfully';
    emit('jobCreated', newJob);

    clearForm();

    setTimeout(() => {
      successMessage.value = '';
    }, 5000);
  } catch (error) {
    console.error('Validation or submission error:', error);
    if (error instanceof z.ZodError) {
      errorMessage.value = error.issues.map(issue => `${issue.path.join('.')} - ${issue.message}`).join('\n');
    } else if (error.response && error.response.data) {
      const serverErrors = Object.entries(error.response.data)
        .map(([field, messages]) => `${field}: ${messages.join(', ')}`)
        .join('\n');
      errorMessage.value = `Server validation failed:\n${serverErrors}`;
    } else {
      errorMessage.value = 'Failed to create Job';
    }
  } finally {
    submitting.value = false;
  }
};

const fetchJobDetails = async () => {
  if (props.jobSlug) {
    await jobStore.fetchJob(props.jobSlug)
    if (jobStore.job) {
      Object.assign(form, jobStore.job)
      form.description = jobStore.job.description || ''

      // Properly set company, category, and location
      if (jobStore.job.company) {
        form.company = { label: jobStore.job.get_company.name, value: jobStore.job.company }
      }
      if (jobStore.job.category) {
        form.category = { label: jobStore.job.get_category, value: jobStore.job.category }
      }
      if (jobStore.job.location) {
        form.location = { label: jobStore.job.get_location, value: jobStore.job.location }
      }

      // showDetails.value = true
      showForm.value = true
      showMoreDetails.value = true
    }
  } else {
    clearForm()
  }
}

const clearForm = () => {
  Object.keys(form).forEach(key => {
    form[key as keyof FormData] = null as any
  })
  form.title = ''
  form.description = ''
  form.deadline = null
  // showDetails.value = false
  showForm.value = false
  showMoreDetails.value = false
  if (tiptapEditor.value?.editor) {
    tiptapEditor.value.editor.commands.clearContent()
  }
  errorMessage.value = ''
  successMessage.value = ''
}


const handleCompanyAdded = async () => {
  await companyStore.fetchCompanies()
  isModalOpen.value = false
  const addedCompany = companies.value[companies.value.length - 1]
  form.company = { label: addedCompany.name, value: addedCompany.id }
}

const handleCategoryAdded = async () => {
  await categoryStore.fetchCategories()
  isModalOpen.value = false
  const addedCategory = categories.value[categories.value.length - 1]
  form.category = { label: addedCategory.name, value: addedCategory.id }
}

const handleLocationAdded = async () => {
  await locationStore.fetchLocations()
  isModalOpen.value = false
  const addedLocation = locations.value[locations.value.length - 1]
  form.location = { label: addedLocation.name, value: addedLocation.id }
}

watch(() => props.jobSlug, fetchJobDetails, { immediate: true })

onMounted(async () => {
  await fetchJobDetails()
  await Promise.all([
    companyStore.fetchCompanies(),
    categoryStore.fetchCategories(),
    locationStore.fetchLocations()
  ])
})
</script>